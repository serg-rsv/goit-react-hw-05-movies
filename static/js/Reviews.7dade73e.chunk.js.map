{"version":3,"file":"static/js/Reviews.7dade73e.chunk.js","mappings":"yOAEMA,E,QAAgBC,GAAAA,GAAH,uF,SC8BnB,EA1BgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,IAAU,WAAtBD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAoBN,GAASO,KAAKH,KACjC,CAACJ,KAGF,8BACGG,EAAQK,OAAS,GAChB,wBACGL,EAAQM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAACd,EAAD,YACE,wBAAKa,KACL,uBAAIC,MAFcF,SAOxB,yE,sLCrBFG,EAAY,kCACZC,EAAU,mCAEhBC,IAAAA,SAAAA,QALiB,gCAOjB,IAAMC,EAAoB,WACxB,OAAOD,IAAAA,IAAA,sCAC+BD,EAD/B,YAEJP,MAAK,qBAAGU,KAAQC,QACPT,KAAI,kBAAoB,CAAEC,GAAtB,EAAGA,GAAuBS,MAA1B,EAAOA,aAEpBC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,aAIlBC,EAAkB,SAAAC,GACtB,OAAOX,IAAAA,IAAA,gCAEsBD,EAFtB,iCAEsDY,EAFtD,YAIJnB,MAAK,qBAAGU,KAAQC,QACPT,KAAI,kBAAoB,CAAEC,GAAtB,EAAGA,GAAuBS,MAA1B,EAAOA,aAEpBC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,aAIlBG,EAAkB,SAAA3B,GACtB,OAAOe,IAAAA,IAAA,iBACUf,EADV,oBAC6Bc,IACjCP,MACC,oBACEU,KACEP,EAFJ,EAEIA,GACAS,EAHJ,EAGIA,MACcS,EAJlB,EAIIC,aACaC,EALjB,EAKIC,YACAC,EANJ,EAMIA,SACAC,EAPJ,EAOIA,OACcC,EARlB,EAQIC,aARJ,MAUO,CACLzB,GAAAA,EACAS,MAAAA,EACAS,YAAa,IAAIQ,KAAKR,GAAaS,cACnCP,OAAQjB,EAAYiB,EACpBE,SAAAA,EACAC,OAAAA,EACAC,UAAWI,KAAKC,MAAkB,GAAZL,OAGzBd,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,aAIlBgB,EAAkB,SAAAxC,GACtB,OAAOe,IAAAA,IAAA,iBACUf,EADV,4BACqCc,IACzCP,MAAK,qBAAGU,KAAQwB,KACVhC,KAAI,gBAAGC,EAAH,EAAGA,GAAIgC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAyBC,EAAtC,EAAwBC,aAAxB,MAAmD,CAC1DnC,GAAAA,EACAgC,KAAAA,EACAC,UAAAA,EACAC,MAAOA,EAAQ/B,EAAY+B,EAAQE,SAGtC1B,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,aAIlBuB,EAAkB,SAAA/C,GACtB,OAAOe,IAAAA,IAAA,iBACUf,EADV,4BACqCc,IACzCP,MAAK,qBAAGU,KAAQC,QACPT,KAAI,kBAA8B,CAAEC,GAAhC,EAAGA,GAAiCC,OAApC,EAAOA,OAAqCC,QAA5C,EAAeA,eAE5BQ,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,c","sources":["components/Reviews/ReviewsStyled.js","components/Reviews/Reviews.jsx","services/tmdb-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst ReviewsStyled = styled.li`\n  margin-bottom: 16px;\n  h4 {\n    margin-bottom: 16px;\n  }\n`;\n\nexport { ReviewsStyled };\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as api from 'services/tmdb-api';\n\nimport { ReviewsStyled } from 'components/Reviews/ReviewsStyled';\n\nconst Reviews = () => {\n  const { movieId } = useParams('movieId');\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    api.getMovieReviews(movieId).then(setReviews);\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <ReviewsStyled key={id}>\n              <h4>{author}</h4>\n              <p>{content}</p>\n            </ReviewsStyled>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport photoHolder from 'images/ava.jpg';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n// https://image.tmdb.org/t/p/w400/kqjL17yufvn9OVLyXYpvtyrFfak.jpg\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w300';\nconst API_KEY = '5ce599886a4c0703a030654068991e03';\n\naxios.defaults.baseURL = BASE_URL;\n\nconst getTrendingMovies = () => {\n  return axios\n    .get(`/trending/movie/day?api_key=${API_KEY}&page=1`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title }) => ({ id, title }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nconst getSearchMovies = query => {\n  return axios\n    .get(\n      `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1`\n    )\n    .then(({ data: { results } }) =>\n      results.map(({ id, title }) => ({ id, title }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nconst getMovieDetails = movieId => {\n  return axios\n    .get(`/movie/${movieId}?api_key=${API_KEY}`)\n    .then(\n      ({\n        data: {\n          id,\n          title,\n          release_date: releaseYear,\n          poster_path: poster,\n          overview,\n          genres,\n          vote_average: userScore,\n        },\n      }) => ({\n        id,\n        title,\n        releaseYear: new Date(releaseYear).getFullYear(),\n        poster: IMAGE_URL + poster,\n        overview,\n        genres,\n        userScore: Math.round(userScore * 10),\n      })\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nconst getMovieCredits = movieId => {\n  return axios\n    .get(`/movie/${movieId}/credits?api_key=${API_KEY}`)\n    .then(({ data: { cast } }) =>\n      cast.map(({ id, name, character, profile_path: photo }) => ({\n        id,\n        name,\n        character,\n        photo: photo ? IMAGE_URL + photo : photoHolder,\n      }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nconst getMovieReviews = movieId => {\n  return axios\n    .get(`/movie/${movieId}/reviews?api_key=${API_KEY}`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, author, content }) => ({ id, author, content }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nexport {\n  getTrendingMovies,\n  getSearchMovies,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n"],"names":["ReviewsStyled","styled","movieId","useParams","useState","reviews","setReviews","useEffect","api","then","length","map","id","author","content","IMAGE_URL","API_KEY","axios","getTrendingMovies","data","results","title","catch","error","console","log","message","getSearchMovies","query","getMovieDetails","releaseYear","release_date","poster","poster_path","overview","genres","userScore","vote_average","Date","getFullYear","Math","round","getMovieCredits","cast","name","character","photo","profile_path","photoHolder","getMovieReviews"],"sourceRoot":""}